
local M = {}

function M:IsAABBCollide(AABB1, AABB2)
    local aabb1 = {}
    aabb1._min = {}
    aabb1._max = {}
    aabb1._min.x = AABB1[1]
    aabb1._min.y = AABB1[2]
    aabb1._max.x = AABB1[3] + AABB1[1]
    aabb1._max.y = AABB1[4] + AABB1[2]

    local aabb2 = {}
    aabb2._min = {}
    aabb2._max = {}
    aabb2._min.x = AABB2[1]
    aabb2._min.y = AABB2[2]
    aabb2._max.x = AABB2[3] + AABB2[1]
    aabb2._max.y = AABB2[4] + AABB2[2]

    return ((aabb1._min.x >= aabb2._min.x and aabb1._min.x <= aabb2._max.x) or (aabb2._min.x >= aabb1._min.x and aabb2._min.x <= aabb1._max.x)) and
           ((aabb1._min.y >= aabb2._min.y and aabb1._min.y <= aabb2._max.y) or (aabb2._min.y >= aabb1._min.y and aabb2._min.y <= aabb1._max.y))
end


--[[function M:Mult(a, b, c)
    return (a[1]-c[1])*(b[2]-c[2])-(b[1]-c[1])*(a[2]-c[2]);
end

function M:IsLineCollisionLine2(aa, bb, cc, dd)
    if math.max(aa[1], bb[1]) < math.min(cc[1], dd[1]) then
        return false
    end

    if math.max(aa[2], bb[2]) < math.min(cc[2], dd[2]) then
        return false
    end

    if math.max(cc[1], dd[1]) < math.min(aa[1], bb[1]) then
        return false
    end

    if math.max(cc[2], dd[2]) < math.min(aa[2], bb[2]) then
        return false
    end

    if self:Mult(cc, bb, aa) * self:Mult(bb, dd, aa)<0.0001 then
        return false
    end

    if self:Mult(aa, dd, cc) * self:Mult(dd, bb, cc)<0.0001 then
        return false
    end
    return true
end


-- 线段和线段碰撞检测
function M:IsLineCollisionLine(p1, p2, p3, p4)
    local x1 = p1[1]
    local x2 = p2[1]
    local x3 = p3[1]
    local x4 = p4[1]

    print(x1 .. " " .. x2 .. " " .. x3 .. " " .. x4)
    local y1 = p1[2]
    local y2 = p2[2]
    local y3 = p3[2]
    local y4 = p4[2]
    print(y1 .. " " .. y2 .. " " .. y3 .. " " .. y4)

    local d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    -- If d is zero, there is no intersection
    if d == 0 then
        return false
    end

    -- Get the x and y
    local pre = (x1*y2 - y1*x2)
    local post = (x3*y4 - y3*x4);
    local x = ( pre * (x3 - x4) - (x1 - x2) * post ) / d;
    local y = ( pre * (y3 - y4) - (y1 - y2) * post ) / d;

    print(x)
    print(y)
    -- Check if the x and y coordinates are within both lines
    if x < math.min(x1, x2) or x > math.max(x1, x2) or
        x < math.min(x3, x4) or x > math.max(x3, x4) then
        return false
    end
    if  y < math.min(y1, y2) or y > math.max(y1, y2) or
        y < math.min(y3, y4) or y > math.max(y3, y4) then
        return false
    end
    return true
end--]]


function M:IsAABBAndLineCollide(AABB, Line)
    local lineRect = {
    {{AABB[1],AABB[2]},
    {AABB[1], AABB[4] + AABB[2]}},
    {{AABB[1],AABB[4] + AABB[2]},
    {AABB[3] + AABB[1], AABB[4] + AABB[2]}},
    {{AABB[3] + AABB[1], AABB[4] + AABB[2]},
    {AABB[3] + AABB[1], AABB[2]}},
    {{AABB[3] + AABB[1], AABB[2]},
    {AABB[1],AABB[2]}},
    }

    for i = 1, 4 do
        if self:IsLineCollisionLine2(Line[1], Line[2], lineRect[i][1], lineRect[i][2]) then
            return true
        end
    end
    return false
end

function M:AABB(data)
    for _, v in ipairs(self.platformRectList) do
        if data ~= v then
            if self:IsAABBCollide(data.rect, v.rect) then
                return true
            end 
        end
    end
    return false
end 

function M:IsAABBCollidePoint(AABB, point)
    local aabb = {}
    aabb._min = {}
    aabb._max = {}
    aabb._min.x = AABB[1]
    aabb._min.y = AABB[2]
    aabb._max.x = AABB[3] + AABB[1]
    aabb._max.y = AABB[4] + AABB[2]

    local p = {}
    p.x = point[1]
    p.y = point[2]

    return aabb._min.x <= p.x and aabb._max.x >= p.x and aabb._min.y <= p.y and aabb._max.y >= p.y
end

function M:border(data)
    local line = {
    {{WORLD_DATA.point[1][1],WORLD_DATA.point[1][2]},{WORLD_DATA.point[2][1],WORLD_DATA.point[2][2]}},
    {{WORLD_DATA.point[2][1],WORLD_DATA.point[2][2]},{WORLD_DATA.point[3][1],WORLD_DATA.point[3][2]}},
    {{WORLD_DATA.point[3][1],WORLD_DATA.point[3][2]},{WORLD_DATA.point[4][1],WORLD_DATA.point[4][2]}},
    {{WORLD_DATA.point[4][1],WORLD_DATA.point[4][2]},{WORLD_DATA.point[1][1],WORLD_DATA.point[1][2]}},
    }

    for i = 1, 4 do
        if false then
            return true
        end
    end
    return false
end 

function M:addplatformList(data)
    table.insert(self.platformRectList, data)
end

local function toClass(t)
    t = t or {}
    return M.makeObject({
        platformRectList = {},
    })
end

function M.new()
    local physic = toClass()
    return physic
end


function M.makeObject(t)
    return setmetatable(t, {__index=M})
end


return M