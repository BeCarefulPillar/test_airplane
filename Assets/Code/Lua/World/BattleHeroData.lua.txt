local uidef = require "View.Uidef"

local M = {}

local function init(self)
    --create hero
end

function M:update(deltaTime)
    --这个应该放到物理系统里面，现在简单处理
    self.time = self.time + deltaTime
    local h = CS.UnityEngine.Input.GetAxis("Horizontal")
    if h > 0 then
        self.dir = 1
    elseif h < 0 then
        self.dir = -1
    end
    self.pos[1] = self.pos[1] + deltaTime * self.speed * self.dir * math.abs(h)


    local v = CS.UnityEngine.Input.GetAxis("Vertical")
    self.pos[2] = self.pos[2] + deltaTime * self.speed * v

    --self.pos[2] = self.pos[2] - (9.8 * self.time) * deltaTime
    self.rect = {   self.pos[1] - self.size[1] / 2,
                    self.pos[2] - self.size[2] / 2,
                    self.size[1], 
                    self.size[2],}

    local isCollide = WORLD_DATA.physic:AABB(self)
    local isBorder = WORLD_DATA.physic:border(self)

    if isCollide or isBorder then
        self.isCollide = true
    else
        self.isCollide = false
    end

end  

function M:lateUpdate()

end

local function toClass(t)
    t = t or {}
    local hero = {
        typeId = t.typeId,
        name = t.name or "",
        hp = 1000,
        atk = 10,
        size = {2.4,3.7},  --目前是meshrender大小 之后这个里面的数据全部写到表中
        pos = {0,0},
        speed = 10,
        dir = 1,
        time = 0,
        isCollide = false,
    }
    hero.rect = {   hero.pos[1] - hero.size[1] / 2,
                    hero.pos[2] - hero.size[2] / 2,
                    hero.size[1], 
                    hero.size[2],}

    return M.makeObject(hero)
end

function M.new(hero)
    local hero = toClass(hero)
    init(self)
    return hero
end

function M.makeObject(t)
    return setmetatable(t, {__index=M})
end

return M