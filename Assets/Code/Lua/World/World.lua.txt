local battleHero =  require "World.BattleHeroData"
local platform =  require "World.PlatformData"
local physic = require "System.PhysicSystem"
local M = {}

function M.Start(self, obj)
    self.heroList = {}
    self.platformList = {}
    
    self.view = obj.view
    self.transform = obj.transform
    self.gameObject = obj.gameObject
    self.deltaTime = CS.UnityEngine.Time.deltaTime

    self.physic = physic.new()
    local hero = battleHero.new(PLAYER_DATA.hero[1])
    table.insert(self.heroList, hero)
    self.physic:addplatformList(hero)

    local p = platform.new()
    table.insert(self.platformList, p)
    self.physic:addplatformList(p)

    self.pos = {0, 0}
    self.size = {40, 40}
    self.point ={{self.pos[1] - self.size[1] * 0.5, self.pos[2] - self.size[2] * 0.5},
                {self.pos[1] + self.size[1] * 0.5, self.pos[2] - self.size[2] * 0.5},
                {self.pos[1] - self.size[1] * 0.5, self.pos[2] + self.size[2] * 0.5},
                {self.pos[1] + self.size[1] * 0.5, self.pos[2] + self.size[2] * 0.5},}
    WORLD_DATA = self
end

function M.Update(self)
    for _,v in ipairs(self.heroList) do
        v:update(self.deltaTime)
    end
    for _,v in ipairs(self.platformList) do
        v:update(self.deltaTime)
    end
end

function M.LateUpdate(self)
    for _,v in ipairs(self.heroList) do
        v:lateUpdate(self.deltaTime)
    end
end

return M